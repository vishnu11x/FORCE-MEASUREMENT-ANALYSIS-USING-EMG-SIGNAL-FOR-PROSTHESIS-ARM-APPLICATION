
FSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000634  0800063c  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000634  08000634  0000163c  2**0
                  CONTENTS
  4 .ARM          00000000  08000634  08000634  0000163c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000634  0800063c  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000634  08000634  00001634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000638  08000638  00001638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000163c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000db7  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000030f  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00002738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000066  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019812  00000000  00000000  0000283e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000181e  00000000  00000000  0001c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e136  00000000  00000000  0001d86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ab9a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000011c  00000000  00000000  000ab9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000abb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800061c 	.word	0x0800061c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800061c 	.word	0x0800061c

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <adc_init>:

volatile uint32_t adc_data;
volatile uint16_t dma2_status;


void adc_init(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	//Enable Clock
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000208:	4b77      	ldr	r3, [pc, #476]	@ (80003e8 <adc_init+0x1e4>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a76      	ldr	r2, [pc, #472]	@ (80003e8 <adc_init+0x1e4>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000214:	4b74      	ldr	r3, [pc, #464]	@ (80003e8 <adc_init+0x1e4>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000218:	4a73      	ldr	r2, [pc, #460]	@ (80003e8 <adc_init+0x1e4>)
 800021a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800021e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000220:	4b71      	ldr	r3, [pc, #452]	@ (80003e8 <adc_init+0x1e4>)
 8000222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000224:	4a70      	ldr	r2, [pc, #448]	@ (80003e8 <adc_init+0x1e4>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_ADC1EN;
 800022c:	4b6e      	ldr	r3, [pc, #440]	@ (80003e8 <adc_init+0x1e4>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000230:	4a6d      	ldr	r2, [pc, #436]	@ (80003e8 <adc_init+0x1e4>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000236:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC -> APB2ENR |= RCC_APB2ENR_ADC2EN;
 8000238:	4b6b      	ldr	r3, [pc, #428]	@ (80003e8 <adc_init+0x1e4>)
 800023a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800023c:	4a6a      	ldr	r2, [pc, #424]	@ (80003e8 <adc_init+0x1e4>)
 800023e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000242:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC -> APB2ENR |= RCC_APB2ENR_ADC3EN;
 8000244:	4b68      	ldr	r3, [pc, #416]	@ (80003e8 <adc_init+0x1e4>)
 8000246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000248:	4a67      	ldr	r2, [pc, #412]	@ (80003e8 <adc_init+0x1e4>)
 800024a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800024e:	6453      	str	r3, [r2, #68]	@ 0x44

	//Set PA1, PA2, PA3, as Analog port
	GPIOA -> MODER |= (GPIO_MODER_MODER1_0) | (GPIO_MODER_MODER1_1);
 8000250:	4b66      	ldr	r3, [pc, #408]	@ (80003ec <adc_init+0x1e8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a65      	ldr	r2, [pc, #404]	@ (80003ec <adc_init+0x1e8>)
 8000256:	f043 030c 	orr.w	r3, r3, #12
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (GPIO_MODER_MODER2_0) | (GPIO_MODER_MODER2_1);
 800025c:	4b63      	ldr	r3, [pc, #396]	@ (80003ec <adc_init+0x1e8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a62      	ldr	r2, [pc, #392]	@ (80003ec <adc_init+0x1e8>)
 8000262:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (GPIO_MODER_MODER3_0) | (GPIO_MODER_MODER3_1);
 8000268:	4b60      	ldr	r3, [pc, #384]	@ (80003ec <adc_init+0x1e8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a5f      	ldr	r2, [pc, #380]	@ (80003ec <adc_init+0x1e8>)
 800026e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000272:	6013      	str	r3, [r2, #0]

	// Configure ADC

	//ADC1
	ADC1 -> SQR3 = (0X01);  // Select Ch 1
 8000274:	4b5e      	ldr	r3, [pc, #376]	@ (80003f0 <adc_init+0x1ec>)
 8000276:	2201      	movs	r2, #1
 8000278:	635a      	str	r2, [r3, #52]	@ 0x34
	ADC1 -> CR2 |= (ADC_CR2_EXTEN_0);  // Enable External trigger
 800027a:	4b5d      	ldr	r3, [pc, #372]	@ (80003f0 <adc_init+0x1ec>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	4a5c      	ldr	r2, [pc, #368]	@ (80003f0 <adc_init+0x1ec>)
 8000280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000284:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 &= ~(ADC_CR2_EXTEN_1);
 8000286:	4b5a      	ldr	r3, [pc, #360]	@ (80003f0 <adc_init+0x1ec>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	4a59      	ldr	r2, [pc, #356]	@ (80003f0 <adc_init+0x1ec>)
 800028c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000290:	6093      	str	r3, [r2, #8]

	ADC1 -> CR2 &= ~( (ADC_CR2_EXTSEL_0) | (ADC_CR2_EXTSEL_3));  // Select TIM2 TRGO event
 8000292:	4b57      	ldr	r3, [pc, #348]	@ (80003f0 <adc_init+0x1ec>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	4a56      	ldr	r2, [pc, #344]	@ (80003f0 <adc_init+0x1ec>)
 8000298:	f023 6310 	bic.w	r3, r3, #150994944	@ 0x9000000
 800029c:	6093      	str	r3, [r2, #8]
	ADC1 -> CR2 |= (ADC_CR2_EXTSEL_1) | (ADC_CR2_EXTSEL_2);
 800029e:	4b54      	ldr	r3, [pc, #336]	@ (80003f0 <adc_init+0x1ec>)
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	4a53      	ldr	r2, [pc, #332]	@ (80003f0 <adc_init+0x1ec>)
 80002a4:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 80002a8:	6093      	str	r3, [r2, #8]

	ADC1 -> CR2 |= (ADC_CR2_ADON);  //Enable ADC1
 80002aa:	4b51      	ldr	r3, [pc, #324]	@ (80003f0 <adc_init+0x1ec>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a50      	ldr	r2, [pc, #320]	@ (80003f0 <adc_init+0x1ec>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6093      	str	r3, [r2, #8]

	//ADC2
	ADC2 -> SQR3 |= (0X02);  // Select Ch 2
 80002b6:	4b4f      	ldr	r3, [pc, #316]	@ (80003f4 <adc_init+0x1f0>)
 80002b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002ba:	4a4e      	ldr	r2, [pc, #312]	@ (80003f4 <adc_init+0x1f0>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC2 -> CR2 |= (ADC_CR2_ADON);  //Enable ADC1
 80002c2:	4b4c      	ldr	r3, [pc, #304]	@ (80003f4 <adc_init+0x1f0>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	4a4b      	ldr	r2, [pc, #300]	@ (80003f4 <adc_init+0x1f0>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6093      	str	r3, [r2, #8]

	//ADC3
	ADC3 -> SQR3 |= (0X03);  // Select Ch 3
 80002ce:	4b4a      	ldr	r3, [pc, #296]	@ (80003f8 <adc_init+0x1f4>)
 80002d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002d2:	4a49      	ldr	r2, [pc, #292]	@ (80003f8 <adc_init+0x1f4>)
 80002d4:	f043 0303 	orr.w	r3, r3, #3
 80002d8:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC3 -> CR2 |= (ADC_CR2_ADON);  //Enable ADC1
 80002da:	4b47      	ldr	r3, [pc, #284]	@ (80003f8 <adc_init+0x1f4>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a46      	ldr	r2, [pc, #280]	@ (80003f8 <adc_init+0x1f4>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6093      	str	r3, [r2, #8]



	// Config DMA2
	DMA2_Stream0 -> CR &= ~(DMA_SxCR_EN);  //Disable DMA
 80002e6:	4b45      	ldr	r3, [pc, #276]	@ (80003fc <adc_init+0x1f8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a44      	ldr	r2, [pc, #272]	@ (80003fc <adc_init+0x1f8>)
 80002ec:	f023 0301 	bic.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
	while(( (DMA2_Stream0 -> CR) & (DMA_SxCR_EN) )){}  // Wait till stream is disable
 80002f2:	bf00      	nop
 80002f4:	4b41      	ldr	r3, [pc, #260]	@ (80003fc <adc_init+0x1f8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f9      	bne.n	80002f4 <adc_init+0xf0>
	//Select Ch0
	DMA2_Stream0 -> CR &= ~( (DMA_SxCR_CHSEL_0) | (DMA_SxCR_CHSEL_1) | (DMA_SxCR_CHSEL_2) );
 8000300:	4b3e      	ldr	r3, [pc, #248]	@ (80003fc <adc_init+0x1f8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a3d      	ldr	r2, [pc, #244]	@ (80003fc <adc_init+0x1f8>)
 8000306:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800030a:	6013      	str	r3, [r2, #0]

	DMA2_Stream0 -> CR |= (DMA_SxCR_PL_0) | (DMA_SxCR_PL_1); // Set very high Priority level
 800030c:	4b3b      	ldr	r3, [pc, #236]	@ (80003fc <adc_init+0x1f8>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a3a      	ldr	r2, [pc, #232]	@ (80003fc <adc_init+0x1f8>)
 8000312:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000316:	6013      	str	r3, [r2, #0]

	DMA2_Stream0 -> CR &= ~(DMA_SxCR_MSIZE_0);  //Set MSize 32-bit
 8000318:	4b38      	ldr	r3, [pc, #224]	@ (80003fc <adc_init+0x1f8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a37      	ldr	r2, [pc, #220]	@ (80003fc <adc_init+0x1f8>)
 800031e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000322:	6013      	str	r3, [r2, #0]
	DMA2_Stream0 -> CR |= (DMA_SxCR_MSIZE_1);
 8000324:	4b35      	ldr	r3, [pc, #212]	@ (80003fc <adc_init+0x1f8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a34      	ldr	r2, [pc, #208]	@ (80003fc <adc_init+0x1f8>)
 800032a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800032e:	6013      	str	r3, [r2, #0]

	DMA2_Stream0 -> CR &= ~(DMA_SxCR_PSIZE_0);  //Set PSize 32-bit
 8000330:	4b32      	ldr	r3, [pc, #200]	@ (80003fc <adc_init+0x1f8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a31      	ldr	r2, [pc, #196]	@ (80003fc <adc_init+0x1f8>)
 8000336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800033a:	6013      	str	r3, [r2, #0]
	DMA2_Stream0 -> CR |= (DMA_SxCR_PSIZE_1);
 800033c:	4b2f      	ldr	r3, [pc, #188]	@ (80003fc <adc_init+0x1f8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a2e      	ldr	r2, [pc, #184]	@ (80003fc <adc_init+0x1f8>)
 8000342:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000346:	6013      	str	r3, [r2, #0]

	DMA2_Stream0 -> CR |= (DMA_SxCR_CIRC);  //Enable circular mode
 8000348:	4b2c      	ldr	r3, [pc, #176]	@ (80003fc <adc_init+0x1f8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a2b      	ldr	r2, [pc, #172]	@ (80003fc <adc_init+0x1f8>)
 800034e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000352:	6013      	str	r3, [r2, #0]
	DMA2_Stream0 -> CR &= ~( (DMA_SxCR_DIR_0) | (DMA_SxCR_DIR_1));  //Set transfer direction
 8000354:	4b29      	ldr	r3, [pc, #164]	@ (80003fc <adc_init+0x1f8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a28      	ldr	r2, [pc, #160]	@ (80003fc <adc_init+0x1f8>)
 800035a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800035e:	6013      	str	r3, [r2, #0]

	DMA2_Stream0 -> NDTR |= 1;  //Set no.of data register
 8000360:	4b26      	ldr	r3, [pc, #152]	@ (80003fc <adc_init+0x1f8>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4a25      	ldr	r2, [pc, #148]	@ (80003fc <adc_init+0x1f8>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6053      	str	r3, [r2, #4]
	DMA2_Stream0 -> PAR = (uint32_t) (&(ADC -> CDR));  //Set Peri Address
 800036c:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <adc_init+0x1f8>)
 800036e:	4a24      	ldr	r2, [pc, #144]	@ (8000400 <adc_init+0x1fc>)
 8000370:	609a      	str	r2, [r3, #8]
	DMA2_Stream0 -> M0AR = (uint32_t) (&adc_data);  //Set Mem Address
 8000372:	4b22      	ldr	r3, [pc, #136]	@ (80003fc <adc_init+0x1f8>)
 8000374:	4a23      	ldr	r2, [pc, #140]	@ (8000404 <adc_init+0x200>)
 8000376:	60da      	str	r2, [r3, #12]

	// Enable DMA transfer complete interrupt
	DMA2_Stream0 -> CR |= DMA_SxCR_TCIE;  // Enable transfer complete interrupt
 8000378:	4b20      	ldr	r3, [pc, #128]	@ (80003fc <adc_init+0x1f8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1f      	ldr	r2, [pc, #124]	@ (80003fc <adc_init+0x1f8>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6013      	str	r3, [r2, #0]

	// Enable DMA interrupt in NVIC
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000384:	2038      	movs	r0, #56	@ 0x38
 8000386:	f7ff ff1f 	bl	80001c8 <__NVIC_EnableIRQ>

	/* CONFIG TIMER FOR TRIGGER */
	TIM2 -> PSC = (8400 - 1);  // Set prescaler for 10000Hz timer frequency
 800038a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800038e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000392:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = (10000-1);  // Set auto reload value
 8000394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000398:	f242 720f 	movw	r2, #9999	@ 0x270f
 800039c:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2 -> CR2 &= ~(( 1U << 4) | ( 1U << 6));  // Select update event for TRGO
 800039e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a8:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80003ac:	6053      	str	r3, [r2, #4]
	TIM2 -> CR2 |= ( 1U << 5);
 80003ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b8:	f043 0320 	orr.w	r3, r3, #32
 80003bc:	6053      	str	r3, [r2, #4]

	ADC -> CCR |= (ADC_CCR_DDS);  //Set Contin DMA Request
 80003be:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <adc_init+0x204>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	4a11      	ldr	r2, [pc, #68]	@ (8000408 <adc_init+0x204>)
 80003c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c8:	6053      	str	r3, [r2, #4]
	ADC -> CCR |= (ADC_CCR_DMA_0);  //Set DMA Mode 1
 80003ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <adc_init+0x204>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <adc_init+0x204>)
 80003d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003d4:	6053      	str	r3, [r2, #4]
	ADC -> CCR |= (0x016); // Enable Dual Mode
 80003d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <adc_init+0x204>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	4a0b      	ldr	r2, [pc, #44]	@ (8000408 <adc_init+0x204>)
 80003dc:	f043 0316 	orr.w	r3, r3, #22
 80003e0:	6053      	str	r3, [r2, #4]


}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40012000 	.word	0x40012000
 80003f4:	40012100 	.word	0x40012100
 80003f8:	40012200 	.word	0x40012200
 80003fc:	40026410 	.word	0x40026410
 8000400:	40012308 	.word	0x40012308
 8000404:	2000001c 	.word	0x2000001c
 8000408:	40012300 	.word	0x40012300

0800040c <adc_start>:


void adc_start(void){
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

	DMA2_Stream0 -> CR |= (DMA_SxCR_EN); // Enable DMA
 8000410:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <adc_start+0x2c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a08      	ldr	r2, [pc, #32]	@ (8000438 <adc_start+0x2c>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6013      	str	r3, [r2, #0]
	TIM2 -> CR1 |= ( TIM_CR1_CEN);  // Enable TIM2
 800041c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]

}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40026410 	.word	0x40026410

0800043c <DMA2_Stream0_IRQHandler>:

// Interrupt Service Routine for DMA2 Stream 0
void DMA2_Stream0_IRQHandler(void) {
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
    // Check for DMA transfer complete interrupt flag
    if(DMA2->LISR & DMA_LISR_TCIF0) {
 8000440:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <DMA2_Stream0_IRQHandler+0x2c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <DMA2_Stream0_IRQHandler+0x22>
        // Clear the interrupt flag
        DMA2->LIFCR |= DMA_LIFCR_CTCIF0;
 800044c:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <DMA2_Stream0_IRQHandler+0x2c>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <DMA2_Stream0_IRQHandler+0x2c>)
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6093      	str	r3, [r2, #8]
        // Set flag to indicate that the transfer is complete
        dma2_status = 1;
 8000458:	4b04      	ldr	r3, [pc, #16]	@ (800046c <DMA2_Stream0_IRQHandler+0x30>)
 800045a:	2201      	movs	r2, #1
 800045c:	801a      	strh	r2, [r3, #0]

    }
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	40026400 	.word	0x40026400
 800046c:	20000020 	.word	0x20000020

08000470 <clock_max_config>:
//-----------------------------------------------------------------------------------------------

/* FUNCTION DEFINITION */

/* Set system clock to 168Hz */
void clock_max_config(void){
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

	RCC -> CR |= ( 1U << 16);  // Enable HSE oscillator
 8000474:	4b35      	ldr	r3, [pc, #212]	@ (800054c <clock_max_config+0xdc>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a34      	ldr	r2, [pc, #208]	@ (800054c <clock_max_config+0xdc>)
 800047a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800047e:	6013      	str	r3, [r2, #0]
	while( ( (RCC -> CR) & ( 1U << 17 ) ) == 0){}  // Wait till HSE oscillator is stable
 8000480:	bf00      	nop
 8000482:	4b32      	ldr	r3, [pc, #200]	@ (800054c <clock_max_config+0xdc>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f9      	beq.n	8000482 <clock_max_config+0x12>

	RCC -> CFGR &= ~( 1U << 7);  // Set prescaler for AHB (divide by 1)
 800048e:	4b2f      	ldr	r3, [pc, #188]	@ (800054c <clock_max_config+0xdc>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	4a2e      	ldr	r2, [pc, #184]	@ (800054c <clock_max_config+0xdc>)
 8000494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000498:	6093      	str	r3, [r2, #8]

	RCC -> CFGR |= ( 1U << 10); // Set prescaler for APB1 (divided by 4)
 800049a:	4b2c      	ldr	r3, [pc, #176]	@ (800054c <clock_max_config+0xdc>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	4a2b      	ldr	r2, [pc, #172]	@ (800054c <clock_max_config+0xdc>)
 80004a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004a4:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 11);
 80004a6:	4b29      	ldr	r3, [pc, #164]	@ (800054c <clock_max_config+0xdc>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	4a28      	ldr	r2, [pc, #160]	@ (800054c <clock_max_config+0xdc>)
 80004ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004b0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 12);
 80004b2:	4b26      	ldr	r3, [pc, #152]	@ (800054c <clock_max_config+0xdc>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	4a25      	ldr	r2, [pc, #148]	@ (800054c <clock_max_config+0xdc>)
 80004b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004bc:	6093      	str	r3, [r2, #8]

	RCC -> CFGR &= ~( 1U << 13); // Set prescaler for APB2 (divided by 2)
 80004be:	4b23      	ldr	r3, [pc, #140]	@ (800054c <clock_max_config+0xdc>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	4a22      	ldr	r2, [pc, #136]	@ (800054c <clock_max_config+0xdc>)
 80004c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80004c8:	6093      	str	r3, [r2, #8]
	RCC -> CFGR &= ~( 1U << 14);
 80004ca:	4b20      	ldr	r3, [pc, #128]	@ (800054c <clock_max_config+0xdc>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	4a1f      	ldr	r2, [pc, #124]	@ (800054c <clock_max_config+0xdc>)
 80004d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80004d4:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 15);
 80004d6:	4b1d      	ldr	r3, [pc, #116]	@ (800054c <clock_max_config+0xdc>)
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	4a1c      	ldr	r2, [pc, #112]	@ (800054c <clock_max_config+0xdc>)
 80004dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004e0:	6093      	str	r3, [r2, #8]

	/* Config PLL */
	RCC -> PLLCFGR = (PLL_M) | ( PLL_N << 6 ) | (((PLL_P >>1 )-1) << 16) | ( 1U << 22 ) | ( PLL_Q << 24 );
 80004e2:	4b1a      	ldr	r3, [pc, #104]	@ (800054c <clock_max_config+0xdc>)
 80004e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000550 <clock_max_config+0xe0>)
 80004e6:	605a      	str	r2, [r3, #4]

	RCC -> CR |= ( 1U << 24);  // Enable PLL
 80004e8:	4b18      	ldr	r3, [pc, #96]	@ (800054c <clock_max_config+0xdc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a17      	ldr	r2, [pc, #92]	@ (800054c <clock_max_config+0xdc>)
 80004ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004f2:	6013      	str	r3, [r2, #0]

	FLASH -> ACR |= ( 1U << 0);  // Set flash latency to 5 wait state
 80004f4:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <clock_max_config+0xe4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a16      	ldr	r2, [pc, #88]	@ (8000554 <clock_max_config+0xe4>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
	FLASH -> ACR &= ~( 1U << 1);
 8000500:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <clock_max_config+0xe4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a13      	ldr	r2, [pc, #76]	@ (8000554 <clock_max_config+0xe4>)
 8000506:	f023 0302 	bic.w	r3, r3, #2
 800050a:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= ( 1U << 2);
 800050c:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <clock_max_config+0xe4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <clock_max_config+0xe4>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6013      	str	r3, [r2, #0]

	RCC -> CFGR &= ~( 1U << 0);  // Select PLL as system clock
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <clock_max_config+0xdc>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <clock_max_config+0xdc>)
 800051e:	f023 0301 	bic.w	r3, r3, #1
 8000522:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= ( 1U << 1);
 8000524:	4b09      	ldr	r3, [pc, #36]	@ (800054c <clock_max_config+0xdc>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <clock_max_config+0xdc>)
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	6093      	str	r3, [r2, #8]

	while(!((RCC -> CFGR) & ( 0x02 << 2))){}
 8000530:	bf00      	nop
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <clock_max_config+0xdc>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <clock_max_config+0xc2>




}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	07405408 	.word	0x07405408
 8000554:	40023c00 	.word	0x40023c00

08000558 <main>:
extern volatile uint32_t adc_data;
extern uint16_t adc1_data;  // Extract ADC1 data
extern uint16_t adc2_data;
extern uint16_t adc3_data;

int main(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

	clock_max_config();
 800055c:	f7ff ff88 	bl	8000470 <clock_max_config>
	adc_init();
 8000560:	f7ff fe50 	bl	8000204 <adc_init>
	adc_start();
 8000564:	f7ff ff52 	bl	800040c <adc_start>

	while(1){

		if(dma2_status) {
 8000568:	4b04      	ldr	r3, [pc, #16]	@ (800057c <main+0x24>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0fa      	beq.n	8000568 <main+0x10>
		// Reset flag
		dma2_status = 0;
 8000572:	4b02      	ldr	r3, [pc, #8]	@ (800057c <main+0x24>)
 8000574:	2200      	movs	r2, #0
 8000576:	801a      	strh	r2, [r3, #0]
		if(dma2_status) {
 8000578:	e7f6      	b.n	8000568 <main+0x10>
 800057a:	bf00      	nop
 800057c:	20000020 	.word	0x20000020

08000580 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000580:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000582:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000584:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <LoopForever+0x6>)
  ldr r1, =_edata
 800058a:	490d      	ldr	r1, [pc, #52]	@ (80005c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <LoopForever+0xe>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a0:	4c0a      	ldr	r4, [pc, #40]	@ (80005cc <LoopForever+0x16>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ae:	f000 f811 	bl	80005d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b2:	f7ff ffd1 	bl	8000558 <main>

080005b6 <LoopForever>:

LoopForever:
  b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   r0, =_estack
 80005b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005c4:	0800063c 	.word	0x0800063c
  ldr r2, =_sbss
 80005c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005cc:	20000024 	.word	0x20000024

080005d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC_IRQHandler>
	...

080005d4 <__libc_init_array>:
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	4d0d      	ldr	r5, [pc, #52]	@ (800060c <__libc_init_array+0x38>)
 80005d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000610 <__libc_init_array+0x3c>)
 80005da:	1b64      	subs	r4, r4, r5
 80005dc:	10a4      	asrs	r4, r4, #2
 80005de:	2600      	movs	r6, #0
 80005e0:	42a6      	cmp	r6, r4
 80005e2:	d109      	bne.n	80005f8 <__libc_init_array+0x24>
 80005e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000614 <__libc_init_array+0x40>)
 80005e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000618 <__libc_init_array+0x44>)
 80005e8:	f000 f818 	bl	800061c <_init>
 80005ec:	1b64      	subs	r4, r4, r5
 80005ee:	10a4      	asrs	r4, r4, #2
 80005f0:	2600      	movs	r6, #0
 80005f2:	42a6      	cmp	r6, r4
 80005f4:	d105      	bne.n	8000602 <__libc_init_array+0x2e>
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fc:	4798      	blx	r3
 80005fe:	3601      	adds	r6, #1
 8000600:	e7ee      	b.n	80005e0 <__libc_init_array+0xc>
 8000602:	f855 3b04 	ldr.w	r3, [r5], #4
 8000606:	4798      	blx	r3
 8000608:	3601      	adds	r6, #1
 800060a:	e7f2      	b.n	80005f2 <__libc_init_array+0x1e>
 800060c:	08000634 	.word	0x08000634
 8000610:	08000634 	.word	0x08000634
 8000614:	08000634 	.word	0x08000634
 8000618:	08000638 	.word	0x08000638

0800061c <_init>:
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061e:	bf00      	nop
 8000620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000622:	bc08      	pop	{r3}
 8000624:	469e      	mov	lr, r3
 8000626:	4770      	bx	lr

08000628 <_fini>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr
